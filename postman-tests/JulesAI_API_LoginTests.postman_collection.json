{
	"info": {
		"_postman_id": "eccd0524-21fc-4a50-9bc0-e78542afc86f",
		"name": "JulesAI_API_LoginTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14532214",
		"_collection_link": "https://winter-astronaut-581681.postman.co/workspace/GraphQL-API-Assignment~39b0a8ba-915b-47cd-98bc-072dfbbac588/collection/14532214-eccd0524-21fc-4a50-9bc0-e78542afc86f?action=share&source=collection_link&creator=14532214"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"const loginData = jsonData?.data?.login;\r",
							"const errors = jsonData?.errors;\r",
							"\r",
							"// Log the full response for debug\r",
							"console.log(\"Full Response:\", JSON.stringify(jsonData, null, 2));\r",
							"\r",
							"// Always check HTTP status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Now test based on actual response\r",
							"if (loginData && loginData.token) {\r",
							"    //Successful login\r",
							"    pm.test(\"Login successful - Token is present\", () => {\r",
							"        pm.expect(loginData.token).to.be.a(\"string\").and.not.be.empty;\r",
							"    });\r",
							"\r",
							"} else if (errors && errors.length > 0) {\r",
							"    const errorMessage = errors[0].message;\r",
							"\r",
							"    if (errorMessage === \"WRONG_CREDENTIALS\") {\r",
							"        //Invalid login\r",
							"        pm.test(\"Login failed - Wrong credentials\", () => {\r",
							"            pm.expect(errorMessage).to.eql(\"WRONG_CREDENTIALS\");\r",
							"        });\r",
							"\r",
							"    } else if (errorMessage === \"data and hash arguments required\") {\r",
							"        //Server-side problem due to bad input\r",
							"        pm.test(\"Server error - Missing hash arguments\", () => {\r",
							"            pm.expect(errorMessage).to.eql(\"data and hash arguments required\");\r",
							"        });\r",
							"\r",
							"    } else {\r",
							"        //Unexpected error\r",
							"        pm.test(\"Unexpected error message\", () => {\r",
							"            throw new Error(`Unexpected error: ${errorMessage}`);\r",
							"        });\r",
							"    }\r",
							"\r",
							"} else {\r",
							"    //Entirely unexpected structure\r",
							"    pm.test(\"Unexpected response format\", () => {\r",
							"        throw new Error(\"Response did not match expected structure.\");\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"operationName\": \"Login\",\r\n  \"variables\": {\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n  },\r\n  \"query\": \"mutation Login($email: String!, $password: String!) { login(email: $email, password: $password) { token defaultPage shouldUseAwsServer } }\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{graphql_base_url}}",
					"host": [
						"{{graphql_base_url}}"
					]
				}
			},
			"response": []
		}
	]
}